package problem2;

import java.util.Scanner;
import java.util.Vector;

public class Board {
	private Piece[][] board = new Piece[9][9];
	private Piece blackKing = new King(Color.BLACK, new Position("E8"));
	private Piece whiteKing = new King(Color.WHITE, new Position("E1"));
	private Piece blackRightRook = new Rook(Color.BLACK, new Position("A8"));
	private Piece blackLeftRook = new Rook(Color.BLACK, new Position("H8"));
	private Piece whiteLeftRook = new Rook(Color.WHITE, new Position("A1"));
	private Piece whiteRightRook = new Rook(Color.WHITE, new Position("H1"));
	private int whiteScore;
	private int blackScore;
	private Color turn = Color.WHITE;
	private boolean gameIsOn;
	private Piece checkMate;
	
	
	public Board() {
		init();		
	}
	public void init() {
		board[1][1] = blackRightRook;
		board[1][2] = new Knight(Color.BLACK, new Position("B8"));
		board[1][3] = new Bishop(Color.BLACK, new Position("C8"));
		board[1][4] = new Queen(Color.BLACK, new Position("D8"));
		board[1][5] = blackKing;
		board[1][6] = new Bishop(Color.BLACK, new Position("F8"));
		board[1][7] = new Knight(Color.BLACK, new Position("G8"));
		board[1][8] = blackLeftRook;
		
		board[8][1] = whiteLeftRook;
		board[8][2] = new Knight(Color.WHITE, new Position("B1"));
		board[8][3] = new Bishop(Color.WHITE, new Position("C1"));
		board[8][4] = new Queen(Color.WHITE, new Position("D1"));
		board[8][5] = whiteKing;
		board[8][6] = new Bishop(Color.WHITE, new Position("F1"));
		board[8][7] = new Knight(Color.WHITE, new Position("G1"));
		board[8][8] = whiteRightRook;
		
		for(int i=1; i<9; i++) {
			board[2][i] = new Pawn(Color.BLACK, new Position(Character.toString((char)('A'+i-1))+7));
		}
		for(int i=1; i<9; i++) {
			board[7][i] = new Pawn(Color.WHITE, new Position(Character.toString((char)('A'+i-1))+7));
		}
	}
	
	public void print() {
		System.out.print(" ");
		for(int i=0; i<8; i++) {
			System.out.print(Character.toString((char)('A'+i)));
		}
		System.out.print("\n");
		for(int i=1; i<9; i++) {
			System.out.print(9-i);
			for(int j=1; j<9; j++) {
				System.out.print((board[i][j]==null?(i%2==j%2?"□":"■"):board[i][j]));
			}
			System.out.print("\n");
		}
	}

	public void welcomeMessage() {
		System.out.println("Welcome to the Chess game, White starts first");
	}
	public void endMessage() {
		System.out.println("Good game!");
		if(checkMate!=null) {
			System.out.println( (checkMate.getColor()==Color.BLACK?Color.WHITE:Color.BLACK)+ " won!");
		}else {
			printStatistics();
		}
	}
	public void printStatistics() {
		System.out.println(turn + "'s turn");
		System.out.println("Score: white - " + whiteScore + ", black - "+blackScore);
	}
	
	public int convertY(Position a) {
		return a.getX()-'A'+1;
	}
	public int convertX(Position a) {
		return 9-a.getY();
	}
	
	public void score(Piece p) {
		if(p instanceof King) {
			checkMate = p;
			return;
		}
		if(p.getColor() == Color.BLACK) {
			whiteScore += p.getValue();
		}else {
			blackScore += p.getValue();
		}
	}
	
	public void move(Position a, Position b) {
		if(board[convertX(b)][convertY(b)]!=null) {
			score(board[convertX(b)][convertY(b)]);
		}
		board[convertX(a)][convertY(a)].setIsMoved(true);
		board[convertX(b)][convertY(b)] = board[convertX(a)][convertY(a)];
		board[convertX(b)][convertY(b)].setCurrentPosition(b);
		board[convertX(a)][convertY(a)] = null;
		
	}
	
	public Vector<Position> getRoute(Position a, Position b){
		Vector<Position> route = new Vector<Position>();
		if(a.getX()==b.getX()) {
			if(a.getY()>b.getY()) {
				for(int i=a.getY()-1; i>b.getY(); i--) {
					route.add(new Position(a.getX(), i));
				}
			}else {
				for(int i=a.getY()+1; i<b.getY(); i++) {
					route.add(new Position(a.getX(), i));
				}
			}
		}else if(a.getY()==b.getY()) {
			if(a.getX()>b.getX()) {
				for(int i=a.getX()-1; i>b.getX(); i--) {
					route.add(new Position((char)i, a.getY()));
				}
			}else {
				for(int i=a.getX()+1; i<b.getX(); i++) {
					route.add(new Position((char)i, a.getY()));
				}
			}
		}else if(Math.abs(a.getY()-b.getY())==Math.abs(a.getX()-b.getX())) {
			int i = a.getX(), j=a.getY();
			i += a.getX()<b.getX()?1:(-1);
			j += a.getY()<b.getY()?1:(-1);
			while(i!=b.getX() && j!=b.getY()) {
				route.add(new Position((char)i, j));
				i += a.getX()<b.getX()?1:(-1);
				j += a.getY()<b.getY()?1:(-1);
			}
		}
		return route;
	}
	public boolean validCastling(String s) {
		return (s.equals("00") ?(turn==Color.BLACK?(((King)blackKing).isNotMoved()&&((Rook)blackLeftRook).isNotMoved()) : (((King)whiteKing).isNotMoved()&&((Rook)whiteLeftRook).isNotMoved())):
			(turn==Color.BLACK?(((King)blackKing).isNotMoved()&&((Rook)blackRightRook).isNotMoved()) : (((King)whiteKing).isNotMoved()&&((Rook)whiteRightRook).isNotMoved() )));
	}
	
	public boolean isCheck(Piece p) {
		for(int i=1; i<=8; i++) {
			for(int j=1; j<=8; j++) {
				if(board[i][j]==p || board[i][j]==null || board[i][j].getColor().equals(p.getColor())) {
					continue;
				}
				if(board[i][j].isLegalMove(board[i][j].getCurrentPosition(), p.getCurrentPosition()) && noObstacles(board[i][j].getCurrentPosition(), p.getCurrentPosition())) {
					return true;
				}
			}
		}
		return false;
	}
	
	public void checkCheck() {
		if(isCheck(blackKing)) {
			System.out.println("Black is checked!");
		}
		if(isCheck(whiteKing)) {
			System.out.println("White is checked!");
		}
	}
	
	public boolean noObstacles(Position a, Position b) {
		Vector<Position> route = getRoute(a, b);
		for(Position position:route) {
			if(board[convertX(position)][convertY(position)] != null) {
				return false;
			}
		}
		if(board[convertX(b)][convertY(b)]!=null && board[convertX(b)][convertY(b)].getColor().equals(turn)) {
			return false;
		}
		return true;
	}
	
	public boolean makeMove() {
		boolean isCastling=false;
		Scanner scan = new Scanner(System.in);
		String input = " ";
		Position a, b, c = new Position(), d = new Position();
		while(true) {
			System.out.println("Enter first position, 00 or 000 for castling, Q- to quit:");
			input = scan.nextLine();
			if(input.charAt(0)=='Q') {
				return false;
			}
			if(input.equals("00") || input.equals("000") ) {
				a=(turn==Color.BLACK?blackKing.getCurrentPosition():whiteKing.getCurrentPosition());
				b=(input.equals("00") ?((turn==Color.BLACK)?blackRightRook.getCurrentPosition():whiteRightRook.getCurrentPosition())
						:((turn==Color.BLACK)?blackLeftRook.getCurrentPosition():whiteLeftRook.getCurrentPosition()));
				c = new Position((b.getX()>a.getX()?'G':'C') , a.getY());
				d = new Position((b.getX()=='H'?'F':'D'), b.getY());
				if(validCastling(input) && noObstacles(a, c) && noObstacles(b, d)) {
					isCastling=true;
					break;
				}
			}else {
				a = new Position(input);
				System.out.println("Enter second position, Q- to quit:");
				input = scan.nextLine();
				if(input.charAt(0)=='Q') {
					return false;
				}
				b = new Position(input);
				if(board[convertX(a)][convertY(a)].getColor().equals(turn) && board[convertX(a)][convertY(a)].isLegalMove(a, b) && noObstacles(a, b)) {
					break;
				}
			}
			
			System.out.println("Wrong input! Try again");
			
		}
		if(isCastling) {
			move(a, c);
			move(b, d);
		}else {
			move(a, b);
		}
		return true;
	}
	
	public void play() {
		welcomeMessage();
		gameIsOn = true;
		while(gameIsOn) {
			print();
			printStatistics();
			gameIsOn = makeMove();
			if(checkMate!=null) {
				break;
			}
			checkCheck();
			turn = (turn.equals(Color.WHITE)?Color.BLACK:Color.WHITE);
		}
		endMessage();
	}
}